#include <gmp.h>    // gmp is included implicitly
#include <libhcs.h> // master header includes everything

#include "mysql_connection.h"

#include <cppconn/driver.h>
#include <cppconn/exception.h>
#include <cppconn/resultset.h>
#include <cppconn/statement.h>
#include <cstring>
#include <string>
#include <sstream>
#include <stdlib.h>

using namespace std;

int main(void)
{

    // initialize data structures
    pcs_public_key *pk = pcs_init_public_key();
    pcs_private_key *vk = pcs_init_private_key();
    hcs_random *hr = hcs_init_random();

    // Generate a key pair with modulus of size 2048 bits
    pcs_generate_key_pair(pk, vk, hr, 2048);

    // gmp_printf("public key n = %Zd\n  g = %Zd\n  n2 = %Zd\n " , pk->n, pk->g, pk->n2);
    // gmp_printf("private key p = %Zd\n  q = %Zd\n p2 = %Zd\n q2 = %Zd\n hp = %Zd\n hq = %Zd\n lambda = %Zd\n mu = %Zd\n n = %Zd\n n2 = %Zd\n"
    //                         , vk->p, vk->q, vk->p2, vk->q2, vk->hp, vk->hq, vk->lambda, vk->mu, vk->n , vk->n2);
    // gmp_printf("hr->rstate = %Zd\n", hr->rstate);

    // libhcs works directly with gmp mpz_t types, so initialize some
    mpz_t a, b, c;
    mpz_inits(a, b, c, NULL);

    mpz_set_str(a, "453810779614301010944617818095824510980130528422321026994757977014702039796065576238981204037284754057517440732691925342263787383959161126856703531290416126072893023474587239704112028609310980535227175638458124094146990877576858106614583243682516851869823692587646100291636561742923900867608706068012278431113881343563979748483379408151084762165989575204172571322952327206284253051795994937753543686299694468097801816664589592504557626307172925991481207768552699793885210884100502276388474185066210082328376644916552078330782521741211911754650213247118090589088724350866764601723197222093458798615448829202613875166332442148218507022123790424594019360121760606553346556628847750089401003928142102273460333870291839395259778632057785284318525732451891168686987403675545073944660136624811056787665774006007586647324495275809557763598329945925743073420597762333542314906190981297570948566761370725917017807775617337885882635637260650215266341761607143464463341023892300704036276765599004229079817057276141741110070728628225884888164966502404519201637069449690144802555628238883476266185844319145030700270889564255303086578311802866468544553017863856958331658223463844464550028716361002303471895589328010952500599174184832875149359558302", 10);
    mpz_set_str(b, "22859103029337370037221196997793681947994523726607212925932992921858989811009221484271306528017627797052913509331397437791574453163114904528924869848590363499475298746933491212372231344920202199352619103539712134258777650071424692292066962985972603714346877485251464755227229674171519985375409713853815606604526817092768793519812311196797236031324478945700386470299096704118938261063001496754357605753698515983915061862814552240992260818239685460440565074366150895146844959773558219329429656216681293684535100739908650678176547942230135511421906497108814539962656759004237851463267065514044621841365606687088329029095381492604761324582583067047934589053704775188649351241889197614485316924674714007658321095937924305084056908841285802564818802996401894535141625783926174966075360451288550173301324744233333716003080845564083390826803876268120072313519270689166390181141949201027998479288616913547230788402555263755692296988920176653058307361225894211770409801580665936082189031207632895144997484996880290015578991838103032697070157572143516064446987276927149673000133711891183677728004147015053494291655605062170476067076031571164248450146379756918930741737188772712851571070482346826911782262656950712765935861858133399145462380818", 10);
    mpz_set_str(pk->n, "75822727776998728446689903947435695544428381667286794116597261947279674080807973978855405707322274820579838357992038030501162195279735614956293146562712396928801806421341956903273650787633584337661107446170380886335701806614878605243066129978668664134444303822639682410147597330878529930532751157139066038658714710078842374105894391722854427134167626763502010985836823151271102933024515120574666072285021771775703075212478513383407847850171068852143476937444145092710309365081888939247510360686521581089868517474340851598255933711053653580956671857454820125719990164725597742611538873525590091187125177570251621140967", 10);
    mpz_set_str(pk->g, "75822727776998728446689903947435695544428381667286794116597261947279674080807973978855405707322274820579838357992038030501162195279735614956293146562712396928801806421341956903273650787633584337661107446170380886335701806614878605243066129978668664134444303822639682410147597330878529930532751157139066038658714710078842374105894391722854427134167626763502010985836823151271102933024515120574666072285021771775703075212478513383407847850171068852143476937444145092710309365081888939247510360686521581089868517474340851598255933711053653580956671857454820125719990164725597742611538873525590091187125177570251621140968", 10);
    mpz_set_str(pk->n2, "5749086047544854536448029289098236741371917996622550707767526389309484979586488662741717073218385315623585073210402130561257814864825593512404573680590214861401200629727947807251311727153474378025407994270142013406340047810746718849733683699486114524393564063862744699773838140191954319277751428788638454702400665647497721316206086380088260675498777291306588515144520715541934115860832571957489269219817853120606780385812488196415270760792699142320765171274671168145943590561141347994579233359138029513999353058210549870082076600778272879001662580666359747138131759941671012161798083148069662188629567392986104825643647486975305138773692039634728957155379833434061524490898911065792789364181611051714449097330735778816539419982295235373662097297271375015229011915487275961404625203650523014053839975575683691383412623028529162715542829361405612446224365526347029971117265083327098069100517005421678316969484282286707232288021248991130364449436484926052597309792616607569662759489934989021184841505752691856435861940283021145426058212194142545503274407711156452410064334065392422848071420239577167326046541088471144850975899231320787845263194774351956264346509722533609532827110597189906481063115597836939122261695066218961534885695089", 10);
    mpz_set_str(vk->p, "302600114362682152164673722545517214601987943140959091819249810956022822070825507625795975675831689953533706454551171337613440724994984444571401510850637291704920418274478749410166768903811381638195973008858850965374405399867000141946380662733145261836188980582084835187660005738843432812004408142435039729401", 10);
    mpz_set_str(vk->q, "250570717518372122449630637700105306609228570548699833509410082581205977465828177939232451514212345516863832285487928259245721286078270773548202547078354969488508280666932649561870378439361545255185712350084874229619866513325719252962770464962221590550001535072158074520595373493307159962317325634580314931167", 10);
    mpz_set_str(vk->p2, "91566829212308317313129573928955302823483670028947084485269523728887718986027643340214252427839752498769571429587883876079483800694185900421330948217140894162097943226439746960577770011039117954875862330779379897857915687790059889178274800957306171611593765291354641753373048154019296090990432519790983410433327289681591343118375644896198547916817311959298520797013137520565709194521165620931924464585276837329449585145798494305952674485484776719370596930336761540202409482625606009288946144474778923159547356358053359273974279718720468708501955412126215545950393663324084781238638210196536609218941932041295303818801", 10);
    mpz_set_str(vk->q2, "62785684477671838058741147880300095068959768658121838642902440204667845260526401511907011182435251864726093347648032699129981366034960524930789528501936333106231691048527941730275534485627245516483890998517365995722829286478494310054004739187023885911321553030956571274782912367815010870050617121268396741173852682211501663625530012094099475867257079618678120262495731788881574136204474175982196552405933794836171495577772970206482047827504259959115923644554749167844386765675573575450258463270820859616551504777428589589662304443191922291899055957987897813287566463841941412717229111434376234549234689091359947981889", 10);
    mpz_set_str(vk->hp, "206551379003395646811089503930305621827062214111607556381449200195050605854667845877169143624276474285521183158734597788999085911277801627305375529173897589216247055327684481924852811188816188630154701462293305319611460360218692597880555993533372894301412710786562418541113229864746534742327018204965891380622", 10);
    mpz_set_str(vk->hq, "79534010046219259282296855217483110960209612145439209059708382380977991857930561263911135329876865067054083141325584419486279632863826318352140292883744877252124077083043973075794215142658911594519265121927397803013320543354342686160832810200799278767499553220034183726646795754576016697126653138342298510292", 10);
    mpz_set_str(vk->lambda, "5415909126928480603334993139102549681744884404806199579756947281948548148629140998489671836237305344327131311285145573607225871091409686782592367611622314066342986172952996921662403627688113166975793389012170063309692986186777043231647580712762047438174593130188548743581971237919894995038053654081361859904154395660497237130805720525900628900925457874986596575750583089838133866677704388214974117506784124021807538319459958127610620417078415259573133777108225202251205761867176967162533800953096332442606202293956937600232975842704352441860537194982818090952414260647953916635948821020959964172343103128088304748600", 10);
    mpz_set_str(vk->mu, "61107823949141646327579461715431217457311596301911124332332024338740667433197437196672112369532425539396262218689170237983561788915228243920629602764379113160407012026817624429934298758139525690094484407681261491806113207352153250850833863458963010782690295192584030525258204771439679153218126139084719217057818511213536752347977597102647867201387991142417142980090994566572522273014796171552110299796533701989127620265373278807105347080840703664637312170019186099011787978881324149597573004371735392377943442497082268746336721560601362814323359940830966258879228212648214660202347395961333840761765083865327318812792", 10);
    mpz_set_str(vk->n, "75822727776998728446689903947435695544428381667286794116597261947279674080807973978855405707322274820579838357992038030501162195279735614956293146562712396928801806421341956903273650787633584337661107446170380886335701806614878605243066129978668664134444303822639682410147597330878529930532751157139066038658714710078842374105894391722854427134167626763502010985836823151271102933024515120574666072285021771775703075212478513383407847850171068852143476937444145092710309365081888939247510360686521581089868517474340851598255933711053653580956671857454820125719990164725597742611538873525590091187125177570251621140967", 10);
    mpz_set_str(vk->n2, "5749086047544854536448029289098236741371917996622550707767526389309484979586488662741717073218385315623585073210402130561257814864825593512404573680590214861401200629727947807251311727153474378025407994270142013406340047810746718849733683699486114524393564063862744699773838140191954319277751428788638454702400665647497721316206086380088260675498777291306588515144520715541934115860832571957489269219817853120606780385812488196415270760792699142320765171274671168145943590561141347994579233359138029513999353058210549870082076600778272879001662580666359747138131759941671012161798083148069662188629567392986104825643647486975305138773692039634728957155379833434061524490898911065792789364181611051714449097330735778816539419982295235373662097297271375015229011915487275961404625203650523014053839975575683691383412623028529162715542829361405612446224365526347029971117265083327098069100517005421678316969484282286707232288021248991130364449436484926052597309792616607569662759489934989021184841505752691856435861940283021145426058212194142545503274407711156452410064334065392422848071420239577167326046541088471144850975899231320787845263194774351956264346509722533609532827110597189906481063115597836939122261695066218961534885695089", 10);

    // char * tmp = mpz_get_str(NULL,10,pk->n);
    // std::string Str = tmp;
    // cout << "Str = " << Str << endl;

    // // In order to free the memory we need to get the right free function:
    // void (*freefunc)(void *, size_t);
    // mp_get_memory_functions (NULL, NULL, &freefunc);

    // // In order to use free one needs to give both the pointer and the block
    // // size. For tmp this is strlen(tmp) + 1, see [1].
    // freefunc(tmp, strlen(tmp) + 1);


    try
    {
        sql::Driver *driver;
        sql::Connection *con;
        sql::Statement *stmt;
        sql::ResultSet *res;

        /* Create a connection */
        driver = get_driver_instance();
        con = driver->connect("tcp://127.0.0.1:3306", "root", "7749");
        /* Connect to the MySQL test database */
        con->setSchema("homomorphic");

        stmt = con->createStatement();
        // stmt->execute("prepare stmt1 from 'insert into encrypted(ciphertext) values ?'");
        
        std::string s;
        std::stringstream out;

        string querystr = "create table if not exists pubkeyn (owner varchar(20) primary key, ";
        for (int i=0; i < 66; i++){
            out.str("");
            out << i;
            s = out.str();
            if (i != 65){
                querystr = querystr + "n" + s + " bigint unsigned, ";
            }
            else {
                querystr = querystr + "n" + s + " bigint unsigned";
            }
        }
        querystr = querystr + ")";
        // cout << "querystr = " << querystr << endl;
        stmt->execute(querystr);

        querystr = "create table if not exists pubkeyg (owner varchar(20) primary key, ";
        for (int i=0; i < 66; i++){
            out.str("");
            out << i;
            s = out.str();
            if (i != 65){
                querystr = querystr + "g" + s + " bigint unsigned, ";
            }
            else {
                querystr = querystr + "g" + s + " bigint unsigned";
            }
        }
        querystr = querystr + ")";
        // cout << "querystr = " << querystr << endl;
        stmt->execute(querystr);

        querystr = "create table if not exists pubkeyn2 (owner varchar(20) primary key, ";
        for (int i=0; i < 66; i++){
            out.str("");
            out << i;
            s = out.str();
            if (i != 65){
                querystr = querystr + "n2_" + s + " bigint unsigned, ";
            }
            else {
                querystr = querystr + "n2_" + s + " bigint unsigned";
            }
        }
        querystr = querystr + ")";
        // cout << "querystr = " << querystr << endl;
        stmt->execute(querystr);

        
        // res = stmt->executeQuery("SELECT * from encrypted");
        
        querystr = "insert ignore into pubkeyn values(";

        querystr = querystr + "\"taeyun\", ";

        char * tmp = mpz_get_str(NULL,10,pk->n);
        std::string Str = tmp;
        // total of 66 n columns, fill the remaining ones with nulls
        // split into clusters of 19 decimal digits
        int count = 0;
        int leftones;
        for (unsigned i = 0; i < Str.length(); i += 19) {
            count = count + 1;
            if ((i + 19) < Str.length()){
                querystr = querystr + Str.substr(i, 19) + ", ";
                // cout << Str.substr(i, 19) << endl;
            }
            else{
                querystr = querystr + Str.substr(i, 19);
                

            }
        } 
        leftones = 66 - count;
        for (int i = 0; i < leftones; i++){
            if (i == 0){
                querystr = querystr + ", ";
            }
            if ((i+1) >= leftones){
                querystr = querystr + "null)";
            }
            else{
                querystr = querystr + "null, ";

            }
        }
        cout << "querystr = " << querystr << endl;
        stmt->execute(querystr);

        //insert into pubkeyg table
        querystr = "insert ignore into pubkeyg values(";
        querystr = querystr + "\"taeyun\", ";
        tmp = mpz_get_str(NULL,10,pk->g);
        Str = tmp;
        // total of 66 n columns, fill the remaining ones with nulls
        // split into clusters of 19 decimal digits
        count = 0;
        for (unsigned i = 0; i < Str.length(); i += 19) {
            count = count + 1;
            if ((i + 19) < Str.length()){
                querystr = querystr + Str.substr(i, 19) + ", ";
                // cout << Str.substr(i, 19) << endl;
            }
            else{
                querystr = querystr + Str.substr(i, 19);
                

            }
        } 
        leftones = 66 - count;
        for (int i = 0; i < leftones; i++){
            if (i == 0){
                querystr = querystr + ", ";
            }
            if ((i+1) >= leftones){
                querystr = querystr + "null)";
            }
            else{
                querystr = querystr + "null, ";

            }
        }
        cout << "querystr = " << querystr << endl;
        stmt->execute(querystr);

        //insert into pubkeyn2 table
        querystr = "insert ignore into pubkeyn2 values(";
        querystr = querystr + "\"taeyun\", ";
        tmp = mpz_get_str(NULL,10,pk->n2);
        Str = tmp;
        // total of 66 n columns, fill the remaining ones with nulls
        // split into clusters of 19 decimal digits
        count = 0;
        for (unsigned i = 0; i < Str.length(); i += 19) {
            count = count + 1;
            if ((i + 19) < Str.length()){
                querystr = querystr + Str.substr(i, 19) + ", ";
                // cout << Str.substr(i, 19) << endl;
            }
            else{
                querystr = querystr + Str.substr(i, 19);
                

            }
        } 
        leftones = 66 - count;
        for (int i = 0; i < leftones; i++){
            if (i == 0){
                querystr = querystr + ", ";
            }
            if ((i+1) >= leftones){
                querystr = querystr + "null)";
            }
            else{
                querystr = querystr + "null, ";

            }
        }
        cout << "querystr = " << querystr << endl;
        stmt->execute(querystr);

        // In order to free the memory we need to get the right free function:
        void (*freefunc)(void *, size_t);
        mp_get_memory_functions (NULL, NULL, &freefunc);

        // In order to use free one needs to give both the pointer and the block
        // size. For tmp this is strlen(tmp) + 1, see [1].
        freefunc(tmp, strlen(tmp) + 1);

        // //
        // //
        // while (res->next())
        // {
        //     cout << "\t... MySQL replies: ";
        //     /* Access column data by alias or column name */
        //     cout << res->getString("ciphertext") << endl;
        //     cout << "\t... MySQL says it again: ";
        //     /* Access column data by numeric offset, 1 is the first column */
        //     cout << res->getString(1) << endl;
        // }
        // delete res;
        // //
        // //

        delete stmt;
        delete con;
    }
    catch (sql::SQLException &e)
    {
        cout << "# ERR: SQLException in " << __FILE__;
        // cout << "(" << __FUNCTION__ << ") on line " »
        //     << __LINE__ << endl;
        cout << "# ERR: " << e.what();
        cout << " (MySQL error code: " << e.getErrorCode();
        cout << ", SQLState: " << e.getSQLState() << " )" << endl;
    }

    cout << endl;

    // // //
    // // //
    // mpz_set_ui(a, 1200);
    // mpz_set_ui(b, 7600);

    // pcs_encrypt(pk, hr, a, a);  // Encrypt a (= 50) and store back into a
    // pcs_encrypt(pk, hr, b, b);  // Encrypt b (= 76) and store back into b
    // // //
    // // //

    gmp_printf("a = %Zd\nb = %Zd\n", a, b); // can use all gmp functions still

    pcs_ee_add(pk, c, a, b); // Add encrypted a and b values together into c
    pcs_decrypt(vk, c, c);   // Decrypt c back into c using private key
    gmp_printf("%Zd\n", c);  // output: c = 126

    // Cleanup all data
    mpz_clears(a, b, c, NULL);
    pcs_free_public_key(pk);
    pcs_free_private_key(vk);
    hcs_free_random(hr);

    return 0;
}